# coding=utf-8
"""
Tests the functions that deal with the loop packet type.
"""
import unittest
from davis_logger.record_types.loop import serialise_loop, deserialise_loop

__author__ = 'david'


class loop_tests(unittest.TestCase):

    loop_packets = [
        'LOO\xff\x00\x17\x00\x8du\t\x033\xf3\x02\x01\x02\xf7\x00\xff\xff\xff'
        '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\xff\xff\xff\xff\xff'
        '\xff\xff\x00\x00\xff\xff\x7f\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x03\x00\xc1'
        '\x82\x02\xe8\x07\n\r\x1f\xb4',
        'LOO\xff\x00\x17\x00\x8du\t\x033\xf3\x02\x01\x02\xf7\x00\xff\xff\xff'
        '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\xff\xff\xff\xff\xff'
        '\xff\xff\x00\x00\xff\xff\x7f\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x03\x00\xc1'
        '\x82\x02\xe8\x07\n\r\x1f\xb4',
        'LOO\xff\x00\x17\x00\x8du\t\x033\xf3\x02\x01\x02\xf7\x00\xff\xff\xff'
        '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\xff\xff\xff\xff\xff'
        '\xff\xff\x00\x00\xff\xff\x7f\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x03\x00\xc1'
        '\x82\x02\xe8\x07\n\r\x1f\xb4',
        'LOO\xff\x00\x17\x00\x8du\t\x033\xf3\x02\x01\x02\xf7\x00\xff\xff\xff'
        '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\xff\xff\xff\xff\xff'
        '\xff\xff\x00\x00\xff\xff\x7f\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x03\x00\xc1'
        '\x82\x02\xe8\x07\n\r\x1f\xb4',
        'LOO\xff\x00\x17\x00\x8du\t\x033\xf3\x02\x01\x02\xf8\x00\xff\xff\xff'
        '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\xff\xff\xff\xff\xff'
        '\xff\xff\x00\x00\xff\xff\x7f\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
        '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x03\x00\xc1'
        '\x82\x02\xe8\x07\n\r[\xc5',
    ]

    def test_round_trip(self):

        for packet in self.loop_packets:
            decoded = deserialise_loop(packet[0:97])
            encoded = serialise_loop(decoded)
            decoded2 = deserialise_loop(encoded)

            self.assertDictEqual(decoded._asdict(), decoded2._asdict())

        # decoded = deserialise_loop(encoded[0:97])
        # print(repr(encoded))
        # self.maxDiff = None
        # self.assertDictEqual(decoded._asdict(), loop._asdict())
