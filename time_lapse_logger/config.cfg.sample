
##############################################################################
#   Database Configuration ###################################################
##############################################################################
[database]

dsn=host=localhost port=5432 user=zxweather password=password dbname=weather

##############################################################################
#   Message Broker Configuration #############################################
##############################################################################
[rabbitmq]

# If you have a Davis Vantage Pro2 Plus weather station, the schedule can be
# started and stopped by your weather stations solar sensors. If you broadcast
# weather data via a RabbitMQ message broker rather than the database you can
# configure the message broker below. When enabled, live data will be received
# from RabbitMQ only - any live data broadcast via the database will be ignored.

# Using this feature requires the pika library to be installed

#host=localhost
#port=5672
#user=guest
#password=guest
#virtual_host=/

# Name of the exchange to bind to. This must be a topic exchange.
#exchange=weather

##############################################################################
#   Schedule Configuration ###################################################
##############################################################################
[schedule]

# Here you need to configure two things:
#   -> How often photos should be taken (the capture interval). Each photo forms
#      one frame of video. A capture interval of 60 seconds would mean 30
#      minutes of real time would make 1 second of video at 30fps.
#   -> The schedule: what time capturing should start, and what time capturing
#      should finish. The video is assembled and stored in the database when
#      capturing stops.
#
# There are three schedule options:
#  -> Fixed: you specify the sunrise and sunset times. They do not vary during
#     the year unless you change them.
#  -> Automatic based on solar sensors: If you've got a Davis Vantage Pro 2 Plus
#     weather station its Solar Radiation sensor can be used to detect sunrise
#     and sunset. In practice the schedule will likely start a little while
#     after civil dawn and a little while before civil dusk.
#  -> Automatic based on location: Calculate sunrise and sunset based on your
#     coordinates (longitude, latitude, elevation) and time zone. The schedule
#     will begin at civil dawn and end at civil dusk.


# How often images should be captured in seconds. This will be the number of
# seconds between each frame of video. A capture interval of 60 will mean
# 30 minutes of real time takes 1 second of video when encoded at 30fps.
capture_interval=60

# What time the sun rises and sets. The time lapse logger will start taking
# pictures at the specified capture interval at sunrise_time every day and stop
# capturing to build the video at sunset_time.
sunrise_time=6:00
sunset_time=20:00

# If your weather station is a Davis Vantage Pro2 Plus you can turn this setting
# on and use the weather stations solar sensors to automatically detect sunrise
# and sunset. This overrides the sunrise_time/sunset_time settings above.
use_solar_sensors=False

# The station that should be used for sunrise detection
station_code=stn

# Alternatively, sunrise and sunset can be calculated based on your location.
# This setting overrides solar sensors and the fixed sunrise/sunset time:
calculate_schedule=True

# These values are required when calculating sunrise and sunset based on your
# location.
latitude = -36.860790
longitude = 174.777887
timezone = Pacific/Auckland
elevation = 0

# You can optionally apply an offset (in minutes) to the calculated sunrise
# and sunset times.
sunrise_offset = 0
sunset_offset = 0


##############################################################################
#   Camera Configuration #####################################################
##############################################################################
[camera]

# Only IP cameras which provide an HTTP interface are supported. Enter the URL
# for your camera that produces an image below:
camera_url=https://10.0.1.206/snapshot.cgi?chan=0

# The Image Source that images should be logged against
image_source=cam01

# You can turn this on if security isn't a concern and your camera has an SSL
# certificate that can't be verified.
disable_ssl_certificate_verification=false

# The directory where captured images will be stored and where the output video
# file should be placed. Make sure there is enough free disk space here!
working_directory=/tmp/tlvlogger

# Set this to true if you'd like a json file to be produced for each frame
# captured. This will allow you to load an individual frame as a camera photo
# into the database using the store_video script.
save_frame_information=False

# Optional: If you want to keep a copy of the individual images that make up
# the time-lapse video you can specify a script to archive these. This script
# will be called after all processing has been completed so you can grab
# a copy before they're deleted.
# Parameters passed to the script are:
#   1 - Directory to be archived
#   2 - Date the images were captured
#archive_script=/opt/zxweather/time_lapse_logger/archive_script.sh

##############################################################################
#   Data Processing Configuration ############################################
##############################################################################
[processing]
# A script that should turn the numbered images in the working directory into
# an MP4 video file. The default, omx_mp4.sh, will generate the video using
# hardware acceleration on a Raspberry Pi. A different script will be required
# on other platforms.
encoder_script=/opt/zxweather/time_lapse_logger/encoders/omx_mp4.sh

# Where to store videos on disk that couldn't be loaded into the database for
# whatever reason. Make sure this directory exists and is writable by the
# service. You can load videos in this file by passing the *_info.json files to
# store_video.py along with a database connection string.
backup_location=/var/lib/zxweather/time_lapse_logger/failed_videos/

# When set to false, videos will be stored in the backup location only. From
# there they can later be imported into the database using the store_video
# program. No connection to the database will be made by the time lapse logger
# unless the use_solar_sensors option is set to True.
store_in_database=true

# Here you can multiply the interval to slow down the video. This only makes
# sense when you're producing multiple versions of the same video - otherwise
# you may as well save time and disk space and just set the desired interval
# directly
interval_multiplier=1

# Metadata
title=Time-lapse for {date}
description=Time-lapse from {start_time} to {end_time}

# You can optionally tag your video with a variant name. This is useful if you
# are producing multiple versions of the video. This tag appears in the metadata
# associated with the video
#variant_name=High Quality

# You can optionally produce additional versions of the video with different
# encoder settings or larger frame intervals. Each additional processing section
# must start with "processing" followed by some unique suffix. The suffix should
# contain only letters, numbers and the underscore character.
#[processing_half_speed]
#encoder_script=/opt/zxweather/time_lapse_logger/encoders/omx_mp4.sh
#backup_location=/var/lib/zxweather/time_lapse_logger/failed_videos/half_speed/
#store_in_database=false
#interval_multiplier=2
#title=Time-lapse for {date}
#description=Time-lapse from {start_time} to {end_time} (Half speed)
#variant_name=Half-speed, High Quality